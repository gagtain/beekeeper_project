// node_modules/nuxt-render-on-scroll/dist/render-on-scroll.esm.js
var script = {
  name: "RenderOnScroll",
  props: {
    height: {
      type: String,
      default: ""
    },
    offsetY: {
      type: Number,
      default: 0
    }
  },
  data() {
    return {
      render: false
    };
  },
  computed: {
    styles() {
      if (!this.render && this.height) {
        return "height: " + this.height;
      } else {
        return "";
      }
    }
  },
  mounted() {
    if (this.isInViewport()) {
      this.render = true;
    } else {
      this.addListner();
    }
  },
  beforeDestroy() {
    if (this.interval) {
      clearInterval(this.interval);
    }
  },
  methods: {
    isInViewport() {
      if (!this.$el || typeof window === "undefined")
        return false;
      const scroll = window.scrollY || window.pageYOffset;
      const boundsTop = this.$el.getBoundingClientRect().top + scroll;
      const viewport = {
        top: scroll,
        bottom: scroll + window.innerHeight
      };
      const bounds = {
        top: boundsTop - this.offsetY,
        bottom: boundsTop + this.$el.offsetHeight - this.offsetY
      };
      const topInViewPort = bounds.top <= viewport.bottom && bounds.top >= viewport.top;
      const bottomInViewPort = bounds.bottom >= viewport.top && bounds.bottom <= viewport.bottom;
      return topInViewPort || bottomInViewPort;
    },
    addListner() {
      this.interval = setInterval(() => {
        if (this.isInViewport()) {
          this.render = true;
          clearInterval(this.interval);
          this.interval = null;
        }
      }, 200);
    }
  }
};
function normalizeComponent(template, style, script2, scopeId, isFunctionalTemplate, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== "boolean") {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  }
  const options = typeof script2 === "function" ? script2.options : script2;
  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true;
    if (isFunctionalTemplate) {
      options.functional = true;
    }
  }
  if (scopeId) {
    options._scopeId = scopeId;
  }
  let hook;
  if (moduleIdentifier) {
    hook = function(context) {
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (style) {
        style.call(this, createInjectorSSR(context));
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function(context) {
      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function(context) {
      style.call(this, createInjector(context));
    };
  }
  if (hook) {
    if (options.functional) {
      const originalRender = options.render;
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      const existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }
  return script2;
}
var __vue_script__ = script;
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    style: _vm.styles
  }, [!_vm.render ? [_vm._t("placeholder")] : _vm._e(), _vm._v(" "), _vm.render ? [_vm._t("default")] : _vm._e()], 2);
};
var __vue_staticRenderFns__ = [];
var __vue_inject_styles__ = void 0;
var __vue_scope_id__ = void 0;
var __vue_module_identifier__ = void 0;
var __vue_is_functional_template__ = false;
var __vue_component__ = normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, void 0, void 0, void 0);
var install = function installRenderOnScroll(Vue) {
  if (install.installed)
    return;
  install.installed = true;
  Vue.component("RenderOnScroll", __vue_component__);
};
__vue_component__.install = install;
var render_on_scroll_esm_default = __vue_component__;
export {
  render_on_scroll_esm_default as default
};
//# sourceMappingURL=nuxt-render-on-scroll.js.map
