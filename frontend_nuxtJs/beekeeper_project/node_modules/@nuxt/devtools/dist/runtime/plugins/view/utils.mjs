import { computed, getCurrentScope, onScopeDispose, ref, watch } from "vue";
export function useObjectStorage(key, initial, readonly = false) {
  const raw = localStorage.getItem(key);
  const data = ref(raw ? JSON.parse(raw) : initial);
  for (const key2 in initial) {
    if (data.value[key2] === void 0)
      data.value[key2] = initial[key2];
  }
  let updating = false;
  let wrote = "";
  if (!readonly) {
    watch(data, (value) => {
      if (updating)
        return;
      wrote = JSON.stringify(value);
      localStorage.setItem(key, wrote);
    }, { deep: true, flush: "sync" });
  }
  useEventListener(window, "storage", (e) => {
    if (e.key === key && e.newValue && e.newValue !== wrote) {
      updating = true;
      data.value = JSON.parse(e.newValue);
      updating = false;
    }
  });
  return data;
}
export function useTransform(data, to, from) {
  return computed({
    get() {
      return to(data.value);
    },
    set(value) {
      data.value = from(value);
    }
  });
}
export function useEventListener(target, type, listener, options) {
  target.addEventListener(type, listener, options);
  getCurrentScope() && onScopeDispose(() => target.removeEventListener(type, listener, options));
}
export function millisecondToHumanreadable(ms) {
  if (ms < 1e3)
    return [+ms.toFixed(0), "ms"];
  if (ms < 1e3 * 60)
    return [+(ms / 1e3).toFixed(1), "s"];
  if (ms < 1e3 * 60 * 60)
    return [+(ms / 1e3 / 60).toFixed(1), "min"];
  return [+(ms / 1e3 / 60 / 60).toFixed(1), "hour"];
}
