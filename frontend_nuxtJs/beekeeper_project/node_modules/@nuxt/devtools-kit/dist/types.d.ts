import { V as VueInspectorData, a as VueInspectorClient, L as LoadingTimeMetric, H as HookInfo, P as PluginMetric, b as ServerFunctions } from './hooks-dc5f2b2f.js';
export { Y as AnalyzeBuildMeta, Z as AnalyzeBuildsInfo, D as AssetInfo, z as AssetType, A as AutoImportsWithMetadata, B as BasicModuleInfo, O as ClientFunctions, Q as ClientUpdateEvent, E as CodeSnippet, C as CompatibilityStatus, F as ComponentRelationship, K as GetWizardArgs, G as GitHubContributor, I as ImageMeta, X as InstallModuleReturn, u as InstalledModuleInfo, y as MaintainerInfo, i as ModuleBuiltinTab, w as ModuleCompatibility, M as ModuleCustomTab, $ as ModuleGlobalOptions, h as ModuleIframeTabLazyOptions, d as ModuleIframeView, f as ModuleLaunchAction, c as ModuleLaunchView, _ as ModuleOptions, v as ModuleStaticInfo, j as ModuleTabInfo, x as ModuleType, e as ModuleVNodeView, g as ModuleView, q as NpmCommandOptions, p as NpmCommandType, a2 as NuxtDevToolsUIOptions, N as NuxtDevtoolsInfo, U as NuxtDevtoolsServerContext, o as PackageManagerName, n as PackageUpdateInfo, s as Payload, t as PluginInfoWithMetic, R as RouteInfo, r as ServerRouteInfo, S as SubprocessOptions, a3 as TabCategory, l as TerminalAction, k as TerminalBase, m as TerminalInfo, T as TerminalState, a0 as VSCodeIntegrationOptions, a1 as VSCodeTunnelOptions, J as WizardActions, W as WizardFunctions } from './hooks-dc5f2b2f.js';
import { Ref } from 'vue';
import { AppConfig } from 'nuxt/schema';
import { NuxtApp } from 'nuxt/dist/app/nuxt';
import { Hookable } from 'hookable';
import { BirpcReturn } from 'birpc';
import 'nitropack';
import 'unstorage';
import 'vite-plugin-vue-inspector';
import 'vue-router';
import 'unimport';
import 'execa';
import '@nuxt/schema';

interface NuxtDevtoolsClientHooks {
    /**
     * When the DevTools navigates, used for persisting the current tab
     */
    'devtools:navigate': (path: string) => void;
    /**
     * Event emitted when the component inspector is updated
     */
    'host:inspector:update': (data: VueInspectorData) => void;
    /**
     * Event emitted when the component inspector is clicked
     */
    'host:inspector:click': (baseUrl: string, file: string, line: number, column: number) => void;
    /**
     * Event to close the component inspector
     */
    'host:inspector:close': () => void;
    /**
     * Triggers reactivity manually, since Vue won't be reactive across frames)
     */
    'host:update:reactivity': () => void;
}
/**
 * Host client from the App
 */
interface NuxtDevtoolsHostClient {
    nuxt: NuxtApp;
    appConfig: AppConfig;
    hooks: Hookable<NuxtDevtoolsClientHooks>;
    colorMode: Ref<'dark' | 'light'>;
    inspector?: {
        instance?: VueInspectorClient;
        enable: () => void;
        disable: () => void;
        toggle: () => void;
        isEnabled: Ref<boolean>;
    };
    loadingTimeMetrics: LoadingTimeMetric;
    getClientHooksMetrics(): HookInfo[];
    getClientPluginMetrics(): PluginMetric[];
    reloadPage(): void;
    closeDevTools(): void;
    /**
     * Refreshes the client
     */
    refreshState(): NuxtDevtoolsHostClient;
}
interface NuxtDevtoolsClient {
    rpc: BirpcReturn<ServerFunctions>;
    renderCodeHighlight: (code: string, lang: string, lines?: boolean, theme?: string) => {
        code: string;
        supported: boolean;
    };
    renderMarkdown: (markdown: string) => string;
    colorMode: string;
    extendClientRpc: <ServerFunctions = {}, ClientFunctions = {}>(name: string, functions: ClientFunctions) => BirpcReturn<ServerFunctions, ClientFunctions>;
}
interface NuxtDevtoolsIframeClient {
    host: NuxtDevtoolsHostClient;
    devtools: NuxtDevtoolsClient;
}
interface NuxtDevtoolsGlobal {
    setClient(client: NuxtDevtoolsHostClient): void;
}

export { HookInfo, LoadingTimeMetric, NuxtDevtoolsClient, NuxtDevtoolsClientHooks, NuxtDevtoolsGlobal, NuxtDevtoolsHostClient, NuxtDevtoolsIframeClient, PluginMetric, ServerFunctions, VueInspectorClient, VueInspectorData };
